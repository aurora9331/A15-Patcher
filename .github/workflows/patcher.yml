name: Modify Framework and Services

on:
  workflow_dispatch:
    inputs:
      framework_jar_url:
        description: 'URL to download framework.jar'
        required: true
      services_jar_url:
        description: 'URL to download services.jar'
        required: true
      miui_services_jar_url:
        description: 'URL to download miui-services.jar'
        required: true
      android_api_level:
        description: 'Android API level'
        required: true
        default: '35'
      custom_device_name:
        description: 'Custom device name'
        required: true
      custom_version:
        description: 'Custom version'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y openjdk-11-jdk zipalign p7zip-full python3 aria2 jq

    - name: Download and validate JARs + Extract in parallel
      run: |
        # Download JARs in parallel
        curl -L -C - -o framework.jar "${{ github.event.inputs.framework_jar_url }}" &
        curl -L -C - -o services.jar "${{ github.event.inputs.services_jar_url }}" &
        curl -L -C - -o miui-services.jar "${{ github.event.inputs.miui_services_jar_url }}" &
        wait
        
        # Validate downloads
        for jar in framework.jar services.jar miui-services.jar; do
          file_size=$(stat -c%s "$jar")
          if [ $file_size -lt 2000000 ]; then
            echo "Error: $jar is too small. Download might have failed." >&2
            exit 1
          fi
        done
        
        # Extract JARs in parallel
        7z x framework.jar -oframework &
        7z x services.jar -oservices &
        7z x miui-services.jar -omiui_services &
        wait

    - name: Decompile all dex files in parallel
      run: |
        # Function to decompile framework dex files
        decompile_framework() {
          if [ -f framework/classes.dex ]; then
            java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} framework/classes.dex -o classes
          else
            echo "framework/classes.dex not found, skipping decompilation."
          fi
          for i in {2..5}; do
            if [ -f "framework/classes${i}.dex" ]; then
              java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} "framework/classes${i}.dex" -o "classes${i}"
            fi
          done
        }
        
        # Function to decompile services dex files  
        decompile_services() {
          if [ -f services/classes.dex ]; then
            java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} services/classes.dex -o services_classes
          else
            echo "services/classes.dex not found, skipping decompilation."
          fi
          for i in {2..5}; do
            if [ -f "services/classes${i}.dex" ]; then
              java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} "services/classes${i}.dex" -o "services_classes${i}"
            fi
          done
        }
        
        # Function to decompile miui-services dex file
        decompile_miui_services() {
          java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} miui_services/classes.dex -o miui_services_classes
        }
        
        # Run decompilation in parallel
        decompile_framework &
        decompile_services &
        decompile_miui_services &
        wait

    - name: Modify framework and services smali files
      run: |
        python3 framework_patch.py &
        python3 services_patch.py &
        python3 miui-service_Patch.py &
        wait

    - name: Recompile all dex files in parallel
      run: |
        # Function to recompile framework dex files
        recompile_framework() {
          if [ -d classes ]; then
            java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} classes -o framework/classes.dex
          else
            echo "classes directory not found, skipping recompilation."
          fi
          for i in {2..5}; do
            if [ -d "classes$i" ]; then
              java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} "classes$i" -o "framework/classes$i.dex"
            fi
          done
        }
        
        # Function to recompile services dex files
        recompile_services() {
          if [ -d services_classes ]; then
            java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} services_classes -o services/classes.dex
          else
            echo "services_classes directory not found, skipping recompilation."
          fi
          for i in {2..5}; do
            if [ -d "services_classes$i" ]; then
              java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} "services_classes$i" -o "services/classes$i.dex"
            fi
          done
        }
        
        # Function to recompile miui-services dex file
        recompile_miui_services() {
          java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} miui_services_classes -o miui_services/classes.dex
        }
        
        # Run recompilation in parallel
        recompile_framework &
        recompile_services &
        recompile_miui_services &
        wait

    - name: Recompile and align JARs in parallel
      run: |
        # Function to recompile and align framework
        process_framework() {
          cd framework
          7z a -tzip ../framework_new.zip *
          cd ..
          zipalign -f -p -v -z 4 framework_new.zip aligned_framework.jar
          rm framework_new.zip
        }
        
        # Function to recompile and align services
        process_services() {
          cd services
          7z a -tzip ../services_new.zip *
          cd ..
          zipalign -f -p -v -z 4 services_new.zip aligned_services.jar
          rm services_new.zip
        }
        
        # Function to recompile and align miui-services
        process_miui_services() {
          cd miui_services
          7z a -tzip ../miui_services_new.zip *
          cd ..
          zipalign -f -p -v -z 4 miui_services_new.zip aligned_miui_services.jar
          rm miui_services_new.zip
        }
        
        # Process JARs in parallel
        process_framework &
        process_services &
        process_miui_services &
        wait

    - name: Create version info and prepare final package
      run: |
        # Create version from link in parallel with preparing final structure
        if [ -z "${{ github.event.inputs.custom_version }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          version=$(echo $framework_url | grep -oP '(?<=V)[^/]*(?=/system)')
          echo "version=${version}" >> $GITHUB_ENV
        else
          echo "version=${{ github.event.inputs.custom_version }}" >> $GITHUB_ENV
        fi
        
        if [ -z "${{ github.event.inputs.custom_device_name }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          device_name=$(echo $framework_url | grep -oP '(?<=redmi/)[^/]*(?=/-)')
          echo "device_name=${device_name}" >> $GITHUB_ENV
        else
          echo "device_name=${{ github.event.inputs.custom_device_name }}" >> $GITHUB_ENV
        fi
        
        # Prepare final package structure efficiently
        mkdir -p module/system/system/framework module/system_ext/framework out
        cp aligned_framework.jar module/system/system/framework/framework.jar
        cp aligned_services.jar module/system/system/framework/services.jar
        cp aligned_miui_services.jar module/system_ext/framework/miui-services.jar

    - name: Create final package and release notes
      run: |
        # Create final ZIP package
        cd module
        zip -r ../${{ env.device_name }}_${{ env.version }}.zip .
        cd ..
        chmod +w ${{ env.device_name }}_${{ env.version }}.zip
        mv ${{ env.device_name }}_${{ env.version }}.zip out/
        
        # Create release notes
        echo "## Release Notes" > release_notes.txt
        echo "- Built modified jars from commit ${{ github.sha }}" >> release_notes.txt
        echo "- Version: ${{ env.version }}" >> release_notes.txt
        echo "- Android Sürümü: ${{ github.event.inputs.android_api_level }}" >> release_notes.txt

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: out/*
        tag: ${{ env.version }}
        name: ${{ env.device_name }}_${{ env.version }}
        allowUpdates: true
        makeLatest: true
        bodyFile: release_notes.txt
        token: ${{ secrets.GITHUB_TOKEN }}
