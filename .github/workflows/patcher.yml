name: Modify Framework and Services

on:
  workflow_dispatch:
    inputs:
      framework_jar_url:
        description: 'URL to download framework.jar'
        required: true
      services_jar_url:
        description: 'URL to download services.jar'
        required: true
      miui_services_jar_url:
        description: 'URL to download miui-services.jar'
        required: true
      android_api_level:
        description: 'Android API level'
        required: true
        default: '35'
      custom_device_name:
        description: 'Custom device name'
        required: true
      custom_version:
        description: 'Custom version'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install dependencies
      run: |
        sudo apt-get update -y && sudo apt-get install -y zipalign p7zip-full python3 aria2 jq

    - name: Use smali & baksmali jars from repo
      run: |
       cp ./tools/smali.jar
       cp ./tools/baksmali.jar

    - name: Download and validate JARs
      run: |
        curl -L -C - -o framework.jar "${{ github.event.inputs.framework_jar_url }}"
        curl -L -C - -o services.jar "${{ github.event.inputs.services_jar_url }}"
        curl -L -C - -o miui-services.jar "${{ github.event.inputs.miui_services_jar_url }}"
        for jar in framework.jar services.jar miui-services.jar; do
          file_size=$(stat -c%s "$jar")
          if [ $file_size -lt 2000000 ]; then
            echo "Error: $jar is too small. Download might have failed." >&2
            exit 1
          fi
        done

    - name: Extract all JARs
      run: |
        7z x framework.jar -oframework
        7z x services.jar -oservices
        7z x miui-services.jar -omiui_services

    - name: Decompile DEX files
      run: |
        decomp() {
          for base in framework services miui_services; do
            for i in {1..5}; do
              dexfile="${base}/classes${i}.dex"
              outdir="${base}_classes${i}"
              [ $i -eq 1 ] && dexfile="${base}/classes.dex" && outdir="${base}_classes"
              if [ -f "$dexfile" ]; then
                java -jar baksmali.jar d -a ${{ github.event.inputs.android_api_level }} "$dexfile" -o "$outdir" &
              fi
            done
          done
          wait
        }
        decomp

    - name: Backup smali files
      run: |
        for d in framework_classes* services_classes* miui_services_classes*; do
          [ -d "$d" ] && cp -r "$d" "${d}_backup"
        done

    - name: Modify framework smali
      run: python3 framework_patch.py

    - name: Modify services smali
      run: python3 services_patch.py

    - name: Modify miui-services smali files
      run: python3 miui-service_Patch.py

    - name: Recompile DEX files
      run: |
        recomp() {
          for base in framework services miui_services; do
            for i in {1..5}; do
              indir="${base}_classes${i}"
              outfile="${base}/classes${i}.dex"
              [ $i -eq 1 ] && indir="${base}_classes" && outfile="${base}/classes.dex"
              if [ -d "$indir" ]; then
                java -jar smali.jar a -a ${{ github.event.inputs.android_api_level }} "$indir" -o "$outfile" &
              fi
            done
          done
          wait
        }
        recomp

    - name: Recompile and align jars
      run: |
        for base in framework services miui_services; do
          cd $base
          7z a -tzip ../${base}_new.zip *
          cd ..
        done
        zipalign -f -p -v -z 4 framework_new.zip aligned_framework.jar
        zipalign -f -p -v -z 4 services_new.zip aligned_services.jar
        zipalign -f -p -v -z 4 miui_services_new.zip aligned_miui_services.jar

    - name: Copy aligned jars to Magisk module
      run: |
        mkdir -p magisk_module/system/system/framework
        mkdir -p magisk_module/system_ext/framework
        cp aligned_framework.jar magisk_module/system/system/framework/framework.jar
        cp aligned_services.jar magisk_module/system/system/framework/services.jar
        cp aligned_miui_services.jar magisk_module/system_ext/framework/miui-services.jar

    - name: Create Version From Link
      run: |
        if [ -z "${{ github.event.inputs.custom_version }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          version=$(echo $framework_url | grep -oP '(?<=V)[^/]*(?=/system)')
          echo "version=${version}" >> $GITHUB_ENV
        else
          echo "version=${{ github.event.inputs.custom_version }}" >> $GITHUB_ENV
        fi
        if [ -z "${{ github.event.inputs.custom_device_name }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          device_name=$(echo $framework_url | grep -oP '(?<=redmi/)[^/]*(?=/-)')
          echo "device_name=${device_name}" >> $GITHUB_ENV
        else
          echo "device_name=${{ github.event.inputs.custom_device_name }}" >> $GITHUB_ENV
        fi
        echo "version=${version}"
        echo "device_name=${device_name}"

    - name: Zip Magisk module
      run: |
        cd magisk_module
        zip -r ../${{ env.device_name }}_${{ env.version }}.zip *
        cd ..
        mkdir -p out
        chmod +w ${{ env.device_name }}_${{ env.version }}.zip
        mv ${{ env.device_name }}_${{ env.version }}.zip out/

    - name: Create Release Notes
      run: |
        echo "## Release Notes" > release_notes.txt
        echo "- Built modified jars from commit ${{ github.sha }}" >> release_notes.txt
        echo "- Version: ${{ env.version }}" >> release_notes.txt
        echo "- Android Sürümü: ${{ github.event.inputs.android_api_level }}" >> release_notes.txt

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: out/*
        tag: ${{ env.version }}
        name: ${{ env.device_name }}_${{ env.version }}
        allowUpdates: true
        makeLatest: true
        bodyFile: release_notes.txt
        token: ${{ secrets.GITHUB_TOKEN }}
