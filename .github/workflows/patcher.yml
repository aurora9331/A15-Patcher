name: Modify Framework and Services

on:
  workflow_dispatch:
    inputs:
      framework_jar_url:
        description: 'URL to download framework.jar'
        required: true
      services_jar_url:
        description: 'URL to download services.jar'
        required: true
      miui_services_jar_url:
        description: 'URL to download miui-services.jar'
        required: true
      android_api_level:
        description: 'Android API level'
        required: true
        default: '35'
      custom_device_name:
        description: 'Custom device name'
        required: true
      custom_version:
        description: 'Custom version'
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jdk zipalign p7zip-full python3 aria2 jq

    - name: Download JARs
      run: |
        curl -L -o framework.jar "${{ github.event.inputs.framework_jar_url }}"
        curl -L -o services.jar "${{ github.event.inputs.services_jar_url }}"
        curl -L -o miui-services.jar "${{ github.event.inputs.miui_services_jar_url }}"

    - name: Extract all JARs 
      run: |
        7z x framework.jar -oframework &
        7z x services.jar -oservices &
        7z x miui-services.jar -omiui_services &
        wait

    - name: Decompile DEX files 
      run: |
        if [ -f framework/classes.dex ]; then
          java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} framework/classes.dex -o classes &
        fi
        if [ -f services/classes.dex ]; then
          java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} services/classes.dex -o services_classes &
        fi
        if [ -f miui_services/classes.dex ]; then
          java -jar tools/baksmali.jar d -a ${{ github.event.inputs.android_api_level }} miui_services/classes.dex -o miui_services_classes &
        fi
        wait

    - name: Patch smali files 
      run: |
        python3 framework_patch.py "${{ github.event.inputs.core }}" &
        python3 services_patch.py "${{ github.event.inputs.core }}" &
        python3 miui-service_Patch.py &
        wait

    - name: Recompile DEX files 
      run: |
        if [ -d classes ]; then
          java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} classes -o framework/classes.dex &
        fi
        if [ -d services_classes ]; then
          java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} services_classes -o services/classes.dex &
        fi
        if [ -d miui_services_classes ]; then
          java -jar tools/smali.jar a -a ${{ github.event.inputs.android_api_level }} miui_services_classes -o miui_services/classes.dex &
        fi
        wait

    - name: Rebuild JARs 
      run: |
        (cd framework && 7z a -tzip ../framework_new.zip *) &
        (cd services && 7z a -tzip ../services_new.zip *) &
        (cd miui_services && 7z a -tzip ../miui_services_new.zip *) &
        wait

    - name: Align the zips 
      run: |
        zipalign -f -p -v -z 4 framework_new.zip aligned_framework.jar &
        zipalign -f -p -v -z 4 services_new.zip aligned_services.jar &
        zipalign -f -p -v -z 4 miui_services_new.zip aligned_miui_services.jar &
        wait

    - name: Create Version and Device Name
      run: |
        if [ -z "${{ github.event.inputs.custom_version }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          version=$(echo $framework_url | grep -oP '(?<=V)[^/]*(?=/system)')
          echo "version=${version}" >> $GITHUB_ENV
        else
          echo "version=${{ github.event.inputs.custom_version }}" >> $GITHUB_ENV
        fi
        if [ -z "${{ github.event.inputs.custom_device_name }}" ]; then
          framework_url="${{ github.event.inputs.framework_jar_url }}"
          device_name=$(echo $framework_url | grep -oP '(?<=redmi/)[^/]*(?=/-)')
          echo "device_name=${device_name}" >> $GITHUB_ENV
        else
          echo "device_name=${{ github.event.inputs.custom_device_name }}" >> $GITHUB_ENV
        fi

    - name: Rename output jars for zip
      run: |
        cp aligned_framework.jar framework.jar
        cp aligned_services.jar services.jar
        cp aligned_miui_services.jar miui-services.jar

    - name: Zip jars with requested folder structure
      run: |
        mkdir -p module/system/system/framework
        mkdir -p module/system_ext/framework
        cp framework.jar module/system/system/framework/framework.jar
        cp services.jar module/system/system/framework/services.jar
        cp miui-services.jar module/system_ext/framework/miui-services.jar
        cd module
        zip -0 -r ../${{ env.device_name }}_${{ env.version }}.zip .
        cd ..
        mkdir -p out
        chmod +w ${{ env.device_name }}_${{ env.version }}.zip
        mv ${{ env.device_name }}_${{ env.version }}.zip out/

    - name: Create Release Notes
      run: |
        echo "## Release Notes" > release_notes.txt
        echo "- Built modified jars from commit ${{ github.sha }}" >> release_notes.txt
        echo "- Version: ${{ env.version }}" >> release_notes.txt
        echo "- Android Sürümü: ${{ github.event.inputs.android_api_level }}" >> release_notes.txt

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: out/*
        tag: ${{ env.version }}
        name: ${{ env.device_name }}_${{ env.version }}_$(date +'%Y%m%d_%H%M%S')
        allowUpdates: true
        makeLatest: true
        bodyFile: release_notes.txt
        token: ${{ secrets.GITHUB_TOKEN }}
